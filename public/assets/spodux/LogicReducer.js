'use strict';

class LogicReducer extends StateModule {
  
  processAction(action, stateChange) {
    var actionTypes = [];
    var actionHandlers = [];
    
    this.actionTypes.forEach(actionType => {
      var { action, handler } = this._parseActionType(actionType);
      
      actionTypes.push(action);
      actionHandlers.push(handler);
    });
    
    var ind = actionTypes.indexOf(action.type);
    
    // not found
    if (ind === -1) return;
    
    var result = this[actionHandlers[ind]](action.payload, action);
    
    if (!result) {
      console.warn('action handler return empty object');
      return;
    };
    
    // merge stateChange with a new branch generated by the observer
    Object.assign(stateChange, result);
  }
  
  _parseActionType(observer) {
    // trim spaces
    observer = observer.replace(/ /g, '');
    
    return {
      // observer handler
      handler: observer.slice(0, observer.indexOf('(')),
      // observer dependencies
      action: observer.slice(observer.indexOf('(') + 1, observer.indexOf(')'))
    };
  }
  
}